package br.senai.sp.api.resource;

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.senai.sp.api.model.Celular;
import br.senai.sp.api.model.Cliente;
import br.senai.sp.api.model.Confeiteiro;
import br.senai.sp.api.repository.CelularRepository;
import br.senai.sp.api.repository.ConfeiteiroRepository;
import br.senai.sp.api.utils.ConverterData;

@RestController
@RequestMapping("/confeiteiro")
public class ConfeiteiroResource {
	
	@Autowired
	private ConfeiteiroRepository confeiteiroRepository;
	
	@Autowired
	CelularRepository celularRepository;
	
	
	@GetMapping
	@CrossOrigin(origins = "http://localHost:3000")
	public List<Confeiteiro> getConfeiteiros(){
		return confeiteiroRepository.findAll();
	}
	
	//retorna apenas um confeiteiro
	@GetMapping("/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public Confeiteiro getConfeiteiro(@PathVariable Long codConfeiteiro){
		
		Confeiteiro confeiteiro = confeiteiroRepository.findByCod(codConfeiteiro);
		
		return confeiteiro;
	}
		
	
	@PostMapping
	@CrossOrigin(origins = "http://localhost:3000")
	public Confeiteiro gravarConfeiteiro(@Validated @RequestBody Confeiteiro confeiteiro){
		
		// Pegando a data de nascimento que foi inserida pelo usuário
				String dtNascimento = confeiteiro.getDtNasc();
				
				// Pegando o email que foi inserido pelo usuário
				String email = confeiteiro.getEmail();
				
				// Pegando o retorno da consulta feita comparando se o email inserido já existe no banco
				int emailValido = confeiteiroRepository.findByEmail(email);
				
				// Se o emailValido retornar 0, significa que não existe nenhum cliente que cadastrou aquele email
				if(emailValido == 0) {
					
					// Converte a data inserida no padrão dd/MM/yyyy 
					// para o padrão yyyy-MM-dd que será inserida no banco
					confeiteiro.setDtNasc(ConverterData.dataBanco(dtNascimento));
					
					Celular celular = confeiteiro.getCelular();
						
					// Salva o cliente cadastrado
					celularRepository.save(celular);
					Confeiteiro confeiteiroSalvo = confeiteiroRepository.save(confeiteiro);
						
					// retorna o cliente que foi cadastrado
					return confeiteiroSalvo;
						
					
				}else {
					
					// caso o emailValido não retorne 0, significa que um email já foi cadastrado
					// então retornará null 
					return null;
				}
		
	}
	
	//verifica email
	@GetMapping("/email/{email}")
	@CrossOrigin(origins = "http://localhost:3000")
	public int verificarEmail(@PathVariable String email) {
		
		int emailValido = confeiteiroRepository.findByEmail(email);
		
		return emailValido;
		
	}
	
	//verifica cpf
	@GetMapping("/cpf/{cpf}")
	@CrossOrigin(origins = "http://localhost:3000")
	public int verificarCPF(@PathVariable String cpf) {
		
		int cpfValido = confeiteiroRepository.findByCPF(cpf);
		
		return cpfValido;
		
	}
	
	
	//verificar se senha do confieteiro está correta ao tentar alterar
	@GetMapping("/senha/{codConfeiteiro}/{senha}")
	@CrossOrigin(origins = "http://localhost:3000")
	public int verificaSenha(@PathVariable Long codConfeiteiro, @PathVariable String senha) {
		
		int confeiteiro = confeiteiroRepository.findByConfeiteiroSenha(codConfeiteiro, senha);
		
		System.out.println(codConfeiteiro);
		System.out.println(senha);
		
		
		return confeiteiro;
		
	}
	
	//atualiza os dados do confeiteiro sem cpf, senha, email
	/*@PutMapping("/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public ResponseEntity<Confeiteiro> atualizaConteiteiro (@PathVariable Long codConfeiteiro, @RequestBody Confeiteiro confeiteiro	){
		Confeiteiro confeiteiroSalvo = confeiteiroRepository.findById(codConfeiteiro).get();
		
		BeanUtils.copyProperties(confeiteiro, confeiteiroSalvo,"codConfeiteiro");
		
		confeiteiroRepository.save(confeiteiro);
		
		return ResponseEntity.ok(confeiteiro);
	}*/
	
	//atualiza os dados do confeiteiro sem cpf, senha, email
	@PutMapping("/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public ResponseEntity<Confeiteiro> atualizaConteiteiro (@PathVariable Long codConfeiteiro, @RequestBody Confeiteiro confeiteiro	){
		
		Confeiteiro confeiteiroSalvo = confeiteiroRepository.findByCod(codConfeiteiro);
		
		//pega o objeto celular
		Celular celular = confeiteiroSalvo.getCelular();
		
		//seta nesse celular o celular que estou passando no corpo
		celular.setCelular(confeiteiro.getCelular().getCelular());
		
		//depois passa o retorno do objeto no confeiteiro
		confeiteiro.setCelular(celular);
		
		//BeanUtils.copyProperties(confeiteiro, confeiteiroSalvo,"codConfeiteiro");
		
		confeiteiroRepository.save(confeiteiro);
		
		return ResponseEntity.ok(confeiteiroSalvo);
	}
	
	
	//atualiza senha do confeiteiro
	@PutMapping("/senha/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public ResponseEntity<Confeiteiro> atualizaSenhaConfeiteiro (@PathVariable Long codConfeiteiro, @RequestBody String senha){
		
		
		Confeiteiro confeiteiroSalvo = confeiteiroRepository.findByCod(codConfeiteiro);
		
		confeiteiroSalvo.setSenha(senha);
		
		//BeanUtils.copyProperties(confeiteiro, confeiteiroSalvo,"codConfeiteiro");
	
		confeiteiroRepository.save(confeiteiroSalvo);
		
		return ResponseEntity.ok(confeiteiroSalvo);
	}
	
	
	//Atualiza email do confeiteiro
	@PutMapping("/email/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public ResponseEntity<Confeiteiro> atualizaEmailConfeiteiro (@PathVariable Long codConfeiteiro, @RequestBody String email){
		
		Confeiteiro confeiteiroSalvo = confeiteiroRepository.findById(codConfeiteiro).get();
		
		
		confeiteiroSalvo.setEmail(email);
		//BeanUtils.copyProperties(confeiteiro, confeiteiroSalvo,"codConfeiteiro");
		
		confeiteiroRepository.save(confeiteiroSalvo);
		
		return ResponseEntity.ok(confeiteiroSalvo);
	}
	
	

}
