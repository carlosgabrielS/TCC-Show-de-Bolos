package br.senai.sp.api.resource;

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.senai.sp.api.model.Celular;
import br.senai.sp.api.model.ConfeiteiroDTO;
import br.senai.sp.api.model.ItemPedido;
import br.senai.sp.api.model.Pedido;
import br.senai.sp.api.repository.ItemPedidoRepository;
import br.senai.sp.api.repository.PedidoRepository;
import br.senai.sp.api.utils.ConverterData;

@CrossOrigin(origins = "http://showdebolos.tk")
@RestController
@RequestMapping("/pedido")
public class PedidoResource {
	
	@Autowired
	private PedidoRepository pedidoRepository;
	
	@Autowired
	private ItemPedidoRepository itemPedidoRepository;
	
	@GetMapping
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidos(){
		return pedidoRepository.findAll();
	}
	
	
	//PEDIDOS DO CONFEITEIRO QUE ESTAO EM AGUARDE LIMITADOS EM 3 PEDIDOS
	@GetMapping("/aguarde/limit/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosAndamentoLimit(@PathVariable Long codConfeiteiro){
		return pedidoRepository.findByPedidoEmAguardeLimit(codConfeiteiro,new PageRequest(0,3));
	}
	
	//PEDIDOS DO CONFEITEIRO QUE ESTAO RECUSADOS LIMITADOS EM 3 PEDIDOS
	@GetMapping("/recusado/limit/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosRecusadoLimit(@PathVariable Long codConfeiteiro){
		return pedidoRepository.findByPedidoRecusadoLimit(codConfeiteiro,new PageRequest(0,3));
	}
	
	//PEDIDOS DO CONFEITEIRO QUE ESTAO APROVADOS LIMITADOS EM 3 PEDIDOS
	@GetMapping("/aprovado/limit/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosAprovadoLimit(@PathVariable Long codConfeiteiro){
		return pedidoRepository.findByPedidoAprovadoLimit(codConfeiteiro,new PageRequest(0,3));
	}
	
	//TODOS PEDIDOS DO CONFEITEIRO QUE ESTAO EM AGUARDE 
	@GetMapping("/aguarde/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosAndamento(@PathVariable Long codConfeiteiro){
		return pedidoRepository.findByPedidoEmAguarde(codConfeiteiro);
	}
	
	//TODOS PEDIDOS DO CONFEITEIRO QUE ESTAO RECUSADOS
	@GetMapping("/recusado/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosRecusado(@PathVariable Long codConfeiteiro){
		return pedidoRepository.findByPedidoRecusado(codConfeiteiro);
	}
	
	//TODOS PEDIDOS DO CONFEITEIRO QUE ESTAO APROVADOS
	@GetMapping("/aprovado/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosAprovado(@PathVariable Long codConfeiteiro){
		return pedidoRepository.findByPedidoAprovado(codConfeiteiro);
	}
	
	//RETORNA O PEDIDO DOS CLIENTES
	@GetMapping("/cliente/{codCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosCliente(@PathVariable Long codCliente){
		
		List<Pedido> pedidosCliente = pedidoRepository.findByPedidosCliente(codCliente);
		
		return pedidosCliente;
	}
	
	//RETORNA O PEDIDO DOS CLIENTES APROVADOS PARA O PERFIL DO CLIENTE
	@GetMapping("/cliente/aprovado/{codCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosClienteAprovados(@PathVariable Long codCliente){
		
		List<Pedido> pedidosCliente = pedidoRepository.findByPedidosClienteAprovado(codCliente);
		
		return pedidosCliente;
	}
	
	//RETORNA O PEDIDO DOS CLIENTES APROVADOS PARA O PERFIL DO CLIENTE
	@GetMapping("/cliente/aguarde/{codCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosClienteAguarde(@PathVariable Long codCliente){
		
		List<Pedido> pedidosCliente = pedidoRepository.findByPedidosClienteAguarde(codCliente);
		
		return pedidosCliente;
	}
	
	//RETORNA O PEDIDO DOS CLIENTES APROVADOS PARA O PERFIL DO CLIENTE
	@GetMapping("/cliente/pagamento/{codCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosClientePagamento(@PathVariable Long codCliente){
		
		List<Pedido> pedidosCliente = pedidoRepository.findByPedidosClientePagamento(codCliente);
		
		return pedidosCliente;
	}
	
	//RETORNA O PEDIDO DOS CLIENTES APROVADOS PARA O PERFIL DO CLIENTE
	@GetMapping("/cliente/pagamento/mobile/{codCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosClienteMobilePagamento(@PathVariable Long codCliente){
		
		List<Pedido> pedidosCliente = pedidoRepository.findByPedidosClienteMobilePagamento(codCliente);
		
		return pedidosCliente;
	}
	
	//TRAZER APENAS UM PEDIDO
	@GetMapping("/{codPedido}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<ItemPedido> getPedidosConfeiteiro(@PathVariable Long codPedido){
		
		List<ItemPedido> itemPedido = itemPedidoRepository.findByCodPedido(codPedido);
	
		return itemPedido;
	}
	
	//TRAZER PEDIDOS PAGOS NÃO INICIADOS
	@GetMapping("/naoiniciado/pagamento/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosPagosNaoIniciados(@PathVariable Long codConfeiteiro){
		
		List<Pedido> pedido = pedidoRepository.findByPedidosPagosNaoIniciados(codConfeiteiro);
	
		return pedido;
	}
	
	//TRAZER PEDIDOS PAGOS EM ANDAMENTO
	@GetMapping("/andamento/pagamento/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidoPagosEmAndamento(@PathVariable Long codConfeiteiro){
		
		List<Pedido> pedido = pedidoRepository.findByPedidosPagosEmAndamento(codConfeiteiro);
	
		return pedido;
	}
	
	//TRAZER PEDIDOS PAGOS EM ANDAMENTO
	@GetMapping("/finalizado/pagamento/{codConfeiteiro}")
	@CrossOrigin(origins = "http://localhost:3000")
	public List<Pedido> getPedidosPagosConcluídos(@PathVariable Long codConfeiteiro){
		
		List<Pedido> pedido = pedidoRepository.findByPedidosPagosConcluidos(codConfeiteiro);
	
		return pedido;
	}
	//TRAZER PEDIDOS PAGOS NÃO INICIADOS
		@GetMapping("/naoiniciado/limit/pagamento/{codConfeiteiro}")
		@CrossOrigin(origins = "http://localhost:3000")
		public List<Pedido> getPedidosLimitPagosNaoIniciados(@PathVariable Long codConfeiteiro){
			
			List<Pedido> pedido = pedidoRepository.findByPedidosLimitPagosNaoIniciados(codConfeiteiro,new PageRequest(0,3));
		
			return pedido;
		}
	
	//TRAZER PEDIDOS PAGOS EM ANDAMENTO
		@GetMapping("/andamento/limit/pagamento/{codConfeiteiro}")
		@CrossOrigin(origins = "http://localhost:3000")
		public List<Pedido> getPedidoLimitPagosEmAndamento(@PathVariable Long codConfeiteiro){
			
			List<Pedido> pedido = pedidoRepository.findByPedidosLimitPagosEmAndamento(codConfeiteiro,new PageRequest(0,3));
		
			return pedido;
		}
		
		//TRAZER PEDIDOS PAGOS EM ANDAMENTO
		@GetMapping("/finalizado/limit/pagamento/{codConfeiteiro}")
		@CrossOrigin(origins = "http://localhost:3000")
		public List<Pedido> getPedidosLimitPagosConcluídos(@PathVariable Long codConfeiteiro){
			
			List<Pedido> pedido = pedidoRepository.findByPedidosLimitPagosConcluidos(codConfeiteiro,new PageRequest(0,3));
		
			return pedido;
		}
	
	//CADASTRAR O PEDIDO
	@PostMapping
	@CrossOrigin(origins = "http://localhost:3000")
	public Pedido salvarPedido(@RequestBody Pedido pedido) {
		
		Pedido salvarPedido = pedidoRepository.save(pedido);
		
		return salvarPedido;
	}
	
	
	//ATUALIZAR A APROVAÇÃO DO PEDIDO
	@PutMapping("/aprovacao/{codPedido}")
	@CrossOrigin(origins = "http://localhost:3000")
	public ResponseEntity<Pedido> atualizaAprovacaoPedido (@PathVariable Long codPedido, @RequestBody String aprovacao){
		
		Pedido pedidoSalvo = pedidoRepository.findByPedidoConfeiteiro(codPedido);
		
		pedidoSalvo.setAprovacao(aprovacao);
		
//		BeanUtils.copyProperties(aprovacao, pedidoSalvo,"codConfeiteiro");
		
		pedidoRepository.save(pedidoSalvo);
		
		return ResponseEntity.ok(pedidoSalvo);
	}
		

}
