package br.senai.sp.api.resource;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.senai.sp.api.model.Celular;
import br.senai.sp.api.model.Cidade;
import br.senai.sp.api.model.Cliente;
import br.senai.sp.api.model.Confeiteiro;
import br.senai.sp.api.model.Endereco;
import br.senai.sp.api.model.EnderecoCliente;
import br.senai.sp.api.model.EnderecoConfeiteiro;
import br.senai.sp.api.model.Estado;
import br.senai.sp.api.repository.CelularRepository;
import br.senai.sp.api.repository.CidadeRepository;
import br.senai.sp.api.repository.ClienteRepository;
import br.senai.sp.api.repository.EnderecoClienteRepository;
import br.senai.sp.api.repository.EnderecoRepository;
import br.senai.sp.api.repository.EstadoRepository;
import br.senai.sp.api.utils.ConverterData;

@CrossOrigin(origins = "http://showdebolos.tk")
@RestController
@RequestMapping("/enderecocliente")
public class EnderecoClienteResource {

	@Autowired
	private EnderecoClienteRepository enderecoClienteRepository;
	
	@Autowired
	private ClienteRepository clienteRepository;
	
	@Autowired
	private EnderecoRepository enderecoRepository;
	
	@Autowired
	private CelularRepository celularRepository;
	
	@Autowired
	private CidadeRepository cidadeRepository;
	
	@Autowired
	private EstadoRepository estadoRepository;
	
	
	//TRAZ TODOS SO CONFEITEIROS DOS CLIENTES
	@GetMapping
	@CrossOrigin(origins = "http://localhost3000")
	public List<EnderecoCliente> getEnderecoClientes(){
		return enderecoClienteRepository.findAll();
	}
	
	
	//TRAZ O ENDERECO DO CLIENTE PELO CODIGO
	@GetMapping("/{codEnderecoCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public Optional<EnderecoCliente> getEnderecoCliente(@PathVariable Long codEnderecoCliente){
		
		return enderecoClienteRepository.findById(codEnderecoCliente);
	}
	
	//RETORNA OS DADOS DE UM CLIENTE ESPECÍFICO
	@GetMapping("/cliente/{codCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public EnderecoCliente getCliente(@PathVariable Long codCliente){
		
		return enderecoClienteRepository.findByCodCliente(codCliente);
	}
	
	//RETORNA O ENDERECO DE APENAS UM CLIENTE
	@GetMapping("/endereco/cliente/{codCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public Endereco getClienteEndereco(@PathVariable Long codCliente){
		
		return enderecoClienteRepository.findByCodClienteEndereco(codCliente);
	}
	
	
	//RETORNA SE EXISTE O ENDERECO DE UM CLIENTE 
	@GetMapping("/endereco/verifica/cliente/{codCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public int getClienteEnderecoBusca(@PathVariable Long codCliente){
		
		return enderecoClienteRepository.findByCodClienteBuscarEndereco(codCliente);
	}
	
	
	//CADASTRA O ENDERECO COM O CLIENTE
	@PostMapping
	@CrossOrigin(origins = "http://localhost:3000")
	public EnderecoCliente gravarEnderecoCliente(@Validated @RequestBody EnderecoCliente enderecoCliente){
		
		
		EnderecoCliente clienteSalvo = enderecoClienteRepository.save(enderecoCliente);
		return clienteSalvo;
	}
	
	//CADASTRA O ENDERECO COM O CLIENTE
	@PostMapping("/web/{codCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public EnderecoCliente gravarEnderecoCliente(@Validated @PathVariable Long codCliente, @RequestBody EnderecoCliente enderecoCliente){
		
		
		Cliente cliente = clienteRepository.findByCod(codCliente);
		
		enderecoCliente.setCliente(cliente);
		
//		enderecoRepository.save(enderecoCliente.getEndereco());
		
		Endereco endereco = enderecoCliente.getEndereco();
		
		// Por meio do enderecoConfeiteiro que foi passado pelo corpo da requisição
		// temos acesso ao endereco, que possui uma cidade
		// com a cidade que foi cadastrada procuramos no banco um registro que coincide com o que foi digitado
		// que é salvo em cidade
		Cidade cidade = cidadeRepository.findByCidade(endereco.getCidade().getCidade());
		
		// Por meio do enderecoConfeiteiro que foi passado pelo corpo da requisição
		// temos acesso ao endereco, que possui uma cidade e através dela acessamos o estado cadastrado
		// com o estado que foi cadastrado procuramos no banco um registro que coincide com o que foi digitado
		// que é salvo em estado
		Estado estado = estadoRepository.findByUf(endereco.getCidade().getEstado().getUf());
		
		// Atribuindo o estado cadastrado a cidade cadastrada
		cidade.setEstado(estado);
		
		// Atribuindo a cidade cadastrada ao endereco cadastrado
		endereco.setCidade(cidade);
		
		// Salvando o endereco no banco
		enderecoRepository.save(endereco);
		
		EnderecoCliente clienteSalvo = enderecoClienteRepository.save(enderecoCliente);
		return clienteSalvo;
		
		
		
	}
	
	
	@PutMapping("/{codEnderecoCliente}")
	@CrossOrigin(origins = "http://localhost:3000")
	public ResponseEntity<EnderecoCliente> atualizaCliente (@PathVariable Long codEnderecoCliente, @RequestBody EnderecoCliente enderecoCliente	){
		EnderecoCliente clienteSalvo = enderecoClienteRepository.findById(codEnderecoCliente).get();
		
		BeanUtils.copyProperties(enderecoCliente, clienteSalvo,"codEnderecoCliente");
		
		enderecoClienteRepository.save(enderecoCliente);
		
		return ResponseEntity.ok(clienteSalvo);
	}
}
